@startuml
'https://plantuml.com/class-diagram

package Core
{
    class Engine{
        static std::vector<std::weak_ptr<Entity>> Entities;
        static void Reserve(int size);
        static void InitEntity(const std::weak_ptr<Entity>& newEntity);
        static void ClearEntities();
        static void Destroy(EntityPtr<Entity> entityToRemove);
        static void Tick();
    }

    class Entity{        
        Entity(const std::string& EntityName);
        const std::string& GetName();
        void Begin();
        void Tick();
    }

    Engine --> Entity

    class EntityPtr{
        std::shared_ptr<Entity>* Instance;
        std::shared_ptr<int> RefCount;
        std::weak_ptr<TElement> get();
        bool IsValid();
        void reset();
    }

    class Core{
        void RunEngine();
        void CloseApp();
    }

    Core --> Engine
    EntityPtr -> Entity
}

package UnoApp
{
    class GameLifecycleController{
        EntityPtr<Match> CurrentMatch;
        void StartNewGame();
        void Replay();
        void CloseGame();
    }
    
    class Player{
        std::vector<EntityPtr<Card>> CardsOnHand;
        bool HasYelled;
        int GetAmountOfCardsOnHand();
        bool PlayTurn();
        void BuyCards();
        void BuyDeckCard();
        void BuyTossedCard();
        CanYell();
        Yell();
    }

    class DeckController{
        const std::vector<EntityPtr<Card>> AllCards;
        std::stack<EntityPtr<Card>> TossedCards;
        std::stack<EntityPtr<Card>> CardsOnDeck;
        void CreateCards();
        void ShuffleDeckCards();
        void AddCardToDeck(Card* card);
        bool IsDeckEmpty();
        void ShuffleTossedCardsBackToDeck();
        std::weak_ptr<Card> GetTopCard();
    }

    enum TurnFlow{
        CLOCKWISE
        ANTI-CLOCKWISE
    }

    class Match{    
        int CurrentTurn;
        TurnFlow Flow;
        std::vector<EntityPtr<Player>> JoinedPlayers;        
        void StartNewMatch();
        void JoinPlayers();
        void CreateDeck();
        void SortCardsToPlayers();
        void SortFirstPlayerTurn();
        void PlayTurn();
        void ExecuteCardAction();      
        void ExecuteCardTossAction();  
        void SkipTurn();
        void ReverseFlow();
        bool IsMatchEnded();
        void FinishMatch();
    }

    class Card{
    }

    Entity <|-- GameLifecycleController
    GameLifecycleController --> Match

    Entity <|-- Player
    Entity <|-- Match
    Entity <|-- DeckController

    Player -> DeckController
    Match ---> Player
    Match ---> DeckController
    Match -> TurnFlow
    Match --> Card
}

@enduml